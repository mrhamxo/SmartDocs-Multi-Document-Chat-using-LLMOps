from pydantic import BaseModel, Field
from typing import Annotated
from enum import Enum


class ChatAnswer(BaseModel):
    """Validate the chat answer returned by the RAG/LLM pipeline.
    
    Ensures that the answer is a non-empty string and not excessively long.
    """
    answer: Annotated[str, Field(min_length=1, max_length=4096)]


class PromptType(str, Enum):
    """Enum for the types of prompts used in the RAG system."""
    CONTEXTUALIZE_QUESTION = "contextualize_question"  # For rewriting user queries as standalone questions
    CONTEXT_QA = "context_qa"  # For answering queries based on retrieved context


class UploadResponse(BaseModel):
    """Response model for document upload/ingestion endpoints."""
    session_id: str  # Session identifier
    indexed: bool  # Whether the documents were successfully indexed
    message: str | None = None  # Optional message for additional info


class ChatRequest(BaseModel):
    """Request model for sending a chat message to the RAG system."""
    session_id: str  # Session identifier for the conversation
    message: str  # User's input message


class ChatResponse(BaseModel):
    """Response model for returning an answer from the RAG system."""
    answer: str  # Answer generated by the assistant
